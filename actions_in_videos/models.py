# AUTOGENERATED! DO NOT EDIT! File to edit: 05_models.ipynb (unless otherwise specified).

__all__ = ['ResNet50Classifier', 'ResNet152Classifier']

# Cell
import torch.nn as nn
import torchvision  # used to download the model

from torchvision.models import resnet50, resnet152

# Cell
class ResNet50Classifier(nn.Module):
    def __init__(self, num_classes):
        super(ResNet50Classifier, self).__init__()

        resnet = resnet50(pretrained=True)

        self.feature_extractor = nn.Sequential(*list(resnet.children())[:-1])
        self.final = nn.Sequential(
            nn.Linear(resnet.fc.in_features, num_classes),
#            nn.Softmax(dim=-1),
        )

    def forward(self, x):
        batch_size, c, h, w = x.shape
        x = x.view(batch_size, c, h, w)
        x = self.feature_extractor(x)
        x = x.view(batch_size, -1)
        x = self.final(x)
        x = x.view(batch_size, -1)
        return x

# Cell
class ResNet152Classifier(nn.Module):
    def __init__(self, num_classes, latent_dim):
        super(ResNet152Classifier, self).__init__()

        resnet = resnet152(pretrained=True)

        self.feature_extractor = nn.Sequential(*list(resnet.children())[:-1])
        self.final = nn.Sequential(
            nn.Linear(resnet.fc.in_features, latent_dim),
            nn.BatchNorm1d(latent_dim, momentum=0.01),
            nn.Linear(latent_dim, num_classes),
            nn.Softmax(dim=-1),
        )

    def forward(self, x):
        batch_size, seq_length, c, h, w = x.shape
        x = x.view(batch_size * seq_length, c, h, w)
        x = self.feature_extractor(x)
        x = x.view(batch_size * seq_length, -1)
        x = self.final(x)
        x = x.view(batch_size, seq_length, -1)
        return x